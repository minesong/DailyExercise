package com.song.file;

import com.beust.jcommander.internal.Lists;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.util.*;

public class ExcelParsing {
    private static ArrayList<Map<String, String>> mapArrayList1 = new ArrayList<>();
    private static ArrayList<Map<String, String>> mapArrayList2 = new ArrayList<>();

    public static void main(String[] args) {
        List<Integer> list1 = Arrays.asList(8781,
                20191,
                20190,
                20129,
                20128,
                20189,
                20188,
                20127,
                20187,
                20126,
                20186,
                20125,
                20124,
                20185,
                20058,
                20184,
                20057,
                20123,
                20064,
                20047,
                20122,
                20056,
                20183,
                20033,
                20121,
                20070,
                20063,
                20046,
                20182,
                20055,
                20041,
                20195,
                20120,
                20081,
                20181,
                20062,
                20040,
                20032,
                20074,
                20054,
                20069,
                20045,
                20061,
                20031,
                20053,
                20039,
                20084,
                20073,
                20180,
                20050,
                20044,
                20119,
                20080,
                20077,
                20068,
                20036,
                20030,
                20049,
                20038,
                20067,
                20193,
                20118,
                20083,
                20079,
                20072,
                20060,
                20052,
                20076,
                20179,
                20035,
                20043,
                20042,
                20075,
                20059,
                20117,
                20071,
                20066,
                20037,
                20051,
                20178,
                20078,
                20029,
                20048,
                20034,
                20082,
                20096,
                20156,
                20136,
                19967,
                19966,
                19965,
                19968,
                19963,
                19962,
                19961,
                19960,
                451,
                19959,
                19958,
                19296,
                19209,
                19208,
                19970,
                19957,
                19971,
                450,
                19298,
                19297,
                19156,
                19203,
                19984,
                19981,
                19985,
                19976,
                19980,
                19977,
                19983,
                19982,
                19979,
                19978,
                19986,
                19877,
                19990,
                19916,
                19996,
                18676,
                18410,
                18411,
                18412,
                17316,
                17318,
                17319,
                16916,
                18096,
                16363,
                16365,
                16364,
                16362,
                16558,
                18023,
                18022,
                18021,
                16756,
                16371,
                16372,
                16373,
                18267,
                17320,
                16376,
                16378,
                16375,
                16374,
                16377,
                18257,
                16405,
                16404,
                16403,
                16402,
                16401,
                16400,
                16399,
                17216,
                16382,
                16383,
                16381,
                16380,
                16361,
                16360,
                16357,
                16379,
                16356,
                16359,
                18385,
                18383,
                18384,
                18024,
                17976,
                18386,
                18391,
                18390,
                18389,
                18388,
                18387,
                18398,
                18393,
                18414,
                18395,
                16418,
                16412,
                16406,
                16390,
                16387,
                16386,
                16394,
                16369,
                16417,
                16416,
                16415,
                16414,
                16413,
                16410,
                16409,
                16408,
                16407,
                16398,
                16397,
                16396,
                16395,
                16393,
                16392,
                16391,
                16368,
                16388,
                16370,
                18419,
                16470,
                16468,
                16467,
                16464,
                16458,
                16449,
                16439,
                16435,
                18418,
                18413,
                16452,
                16448,
                16447,
                16446,
                16441,
                16437,
                16428,
                16426,
                16419,
                18445,
                18440,
                18425,
                18421,
                18400,
                16520,
                16502,
                16492,
                16473,
                16466,
                16457,
                16456,
                16440,
                18429,
                18456,
                16515,
                16512,
                16510,
                16509,
                16475,
                16474,
                16472,
                16471,
                16465,
                16445,
                16444,
                16436,
                16424,
                16423,
                16518,
                16517,
                16513,
                16506,
                16496,
                16494,
                16493,
                18426,
                16460,
                16459,
                16455,
                18455,
                18436,
                18399,
                18397,
                18392,
                16507,
                16501,
                16462,
                16454,
                18450,
                18434,
                16453,
                18444,
                18437,
                18394,
                16463,
                18452,
                16525,
                16519,
                16514,
                16499,
                16498,
                18417,
                18416,
                16443,
                16429,
                16425,
                18447,
                18438,
                18428,
                18422,
                16503,
                16527,
                16521,
                16461,
                16450,
                16442,
                16427,
                16422,
                16451,
                16438,
                18449,
                18446,
                18439,
                18435,
                18431,
                18430,
                18427,
                16526,
                16523,
                16504,
                18454,
                18448,
                18442,
                18432,
                18424,
                18266,
                16516,
                16511,
                16505,
                16497,
                18453,
                18451,
                18441,
                18423,
                16524,
                16508,
                16500,
                18443,
                18433,
                18420,
                18415,
                16522,
                17537,
                17536,
                16816,
                16817,
                16820,
                16818,
                16819,
                16486,
                16489,
                16495,
                16487,
                16491,
                18458,
                18457,
                18378,
                18260,
                18259,
                18262,
                18261,
                18258,
                16483,
                18376,
                18377,
                16482,
                17496,
                17476,
                17477,
                16479,
                16480,
                16776,
                14258,
                14021,
                13106,
                13107,
                13105,
                13104,
                13103,
                13099,
                13098,
                13097,
                13600,
                12499,
                12464,
                12456,
                12291,
                12283,
                10094,
                8384,
                12060,
                9241,
                7837,
                12133,
                12132,
                12131,
                12122,
                12119,
                8079,
                12088,
                12073,
                10184,
                10183,
                8080,
                11190,
                10090,
                11291,
                10186,
                11598,
                11290,
                10187,
                10095,
                9772,
                9593,
                9591,
                11578,
                436,
                11189,
                12129,
                7448,
                913);
        List<Integer> list2 =Arrays.asList(436,
                450,
                451,
                913,
                7448,
                7837,
                8079,
                8080,
                8384,
                8781,
                9241,
                9591,
                9593,
                9772,
                10090,
                10094,
                10095,
                10183,
                10184,
                10186,
                10187,
                11189,
                11190,
                11290,
                11291,
                11578,
                11598,
                12060,
                12073,
                12088,
                12119,
                12122,
                12129,
                12131,
                12132,
                12133,
                12283,
                12291,
                12456,
                12464,
                12499,
                13097,
                13098,
                13099,
                13103,
                13104,
                13105,
                13106,
                13107,
                13600,
                14021,
                14258,
                16356,
                16357,
                16359,
                16360,
                16361,
                16362,
                16363,
                16364,
                16365,
                16368,
                16369,
                16370,
                16371,
                16372,
                16373,
                16374,
                16375,
                16376,
                16377,
                16378,
                16379,
                16380,
                16381,
                16382,
                16383,
                16386,
                16387,
                16388,
                16390,
                16391,
                16392,
                16393,
                16394,
                16395,
                16396,
                16397,
                16398,
                16399,
                16400,
                16401,
                16402,
                16403,
                16404,
                16405,
                16406,
                16407,
                16408,
                16409,
                16410,
                16412,
                16413,
                16414,
                16415,
                16416,
                16417,
                16418,
                16419,
                16422,
                16423,
                16424,
                16425,
                16426,
                16427,
                16428,
                16429,
                16435,
                16436,
                16437,
                16438,
                16439,
                16440,
                16441,
                16442,
                16443,
                16444,
                16445,
                16446,
                16447,
                16448,
                16449,
                16450,
                16451,
                16452,
                16453,
                16454,
                16455,
                16456,
                16457,
                16458,
                16459,
                16460,
                16461,
                16462,
                16463,
                16464,
                16465,
                16466,
                16467,
                16468,
                16470,
                16471,
                16472,
                16473,
                16474,
                16475,
                16479,
                16480,
                16482,
                16483,
                16486,
                16487,
                16489,
                16491,
                16492,
                16493,
                16494,
                16495,
                16496,
                16497,
                16498,
                16499,
                16500,
                16501,
                16502,
                16503,
                16504,
                16505,
                16506,
                16507,
                16508,
                16509,
                16510,
                16511,
                16512,
                16513,
                16514,
                16515,
                16516,
                16517,
                16518,
                16519,
                16520,
                16521,
                16522,
                16523,
                16524,
                16525,
                16526,
                16527,
                16558,
                16756,
                16776,
                16816,
                16817,
                16818,
                16819,
                16820,
                16916,
                17216,
                17316,
                17318,
                17319,
                17320,
                17476,
                17477,
                17496,
                17536,
                17537,
                17976,
                18021,
                18022,
                18023,
                18024,
                18096,
                18257,
                18258,
                18259,
                18260,
                18261,
                18262,
                18266,
                18267,
                18376,
                18377,
                18378,
                18383,
                18384,
                18385,
                18386,
                18387,
                18388,
                18389,
                18390,
                18391,
                18392,
                18393,
                18394,
                18395,
                18397,
                18398,
                18399,
                18400,
                18410,
                18411,
                18412,
                18413,
                18414,
                18415,
                18416,
                18417,
                18418,
                18419,
                18420,
                18421,
                18422,
                18423,
                18424,
                18425,
                18426,
                18427,
                18428,
                18429,
                18430,
                18431,
                18432,
                18433,
                18434,
                18435,
                18436,
                18437,
                18438,
                18439,
                18440,
                18441,
                18442,
                18443,
                18444,
                18445,
                18446,
                18447,
                18448,
                18449,
                18450,
                18451,
                18452,
                18453,
                18454,
                18455,
                18456,
                18457,
                18458,
                18676,
                19156,
                19203,
                19208,
                19209,
                19296,
                19297,
                19298,
                19877,
                19916,
                19957,
                19958,
                19959,
                19960,
                19961,
                19962,
                19963,
                19965,
                19966,
                19967,
                19968,
                19970,
                19971,
                19976,
                19977,
                19978,
                19979,
                19980,
                19981,
                19982,
                19983,
                19984,
                19985,
                19986,
                19990,
                19996,
                20029,
                20030,
                20031,
                20032,
                20033,
                20034,
                20035,
                20036,
                20037,
                20038,
                20039,
                20040,
                20041,
                20042,
                20043,
                20044,
                20045,
                20046,
                20047,
                20048,
                20049,
                20050,
                20051,
                20052,
                20053,
                20054,
                20055,
                20056,
                20057,
                20058,
                20059,
                20060,
                20061,
                20062,
                20063,
                20064,
                20066,
                20067,
                20068,
                20069,
                20070,
                20071,
                20072,
                20073,
                20074,
                20075,
                20076,
                20077,
                20078,
                20079,
                20080,
                20081,
                20082,
                20083,
                20084,
                20096,
                20117,
                20118,
                20119,
                20120,
                20121,
                20122,
                20123,
                20124,
                20125,
                20126,
                20127,
                20128,
                20129,
                20136,
                20156,
                20178,
                20179,
                20180,
                20181,
                20182,
                20183,
                20184,
                20185,
                20186,
                20187,
                20188,
                20189,
                20190,
                20191,
                20193,
                20195);
        List<Integer> list3 = new ArrayList<>();
        for (Integer a:list1) {
            if (!list2.contains(a)) {
                list3.add(a);
            }
        }
        String s = "";
        List<String> sql = Lists.newArrayList();
        try {
           /* smjdInvoiceTypes.add(new InvoiceSmallTypeVO(1, "明细"));
            smjdInvoiceTypes.add(new InvoiceSmallTypeVO(2, "办公用品"));
            smjdInvoiceTypes.add(new InvoiceSmallTypeVO(3, "耗材"));
            smjdInvoiceTypes.add(new InvoiceSmallTypeVO(4, "日用品"));
            smjdInvoiceTypes.add(new InvoiceSmallTypeVO(0, "不开发票"));*/

            ArrayList<Map<String, String>> mapList = readExcel("C:\\InvoiceCategory_20181218.xlsx");
            for (Map<String, String> map : mapList) {
                if (MapUtils.isEmpty(map)) {
                    continue;
                }
                System.out.println(map);
                String GOODS_CATEGORY_ID = map.get("叶子类目编号");
                String cate = map.get("发票类目").substring(0, 2);
                Integer IS_SUPPORT_INVOICE = 2;
                Integer INVOICE_CATEGORY = 0;
                if (cate.equals("不支")) {
                    IS_SUPPORT_INVOICE = 0;
                    INVOICE_CATEGORY = 0;
                } else if (cate.equals("图书")) {
                    IS_SUPPORT_INVOICE = 1;
                    INVOICE_CATEGORY = 2;
                } else if (cate.equals("数码")) {
                    IS_SUPPORT_INVOICE = 1;
                    INVOICE_CATEGORY = 1;
                } else if (cate.equals("其他")) {
                    IS_SUPPORT_INVOICE = 1;
                    INVOICE_CATEGORY = 3;
                }
                String TAX_CATEGORY_CODE = map.get("税收分类编码");
                String splCode = (TAX_CATEGORY_CODE == null || TAX_CATEGORY_CODE.indexOf("A") > 0|| TAX_CATEGORY_CODE.indexOf("N") > 0) ? "" : ",TAX_CATEGORY_CODE=" + TAX_CATEGORY_CODE;
                String s1 = "update TB_INVOICE_GOODSCATEGORY set INVOICE_CATEGORY=" + INVOICE_CATEGORY
                        + ",IS_SUPPORT_INVOICE=" + IS_SUPPORT_INVOICE + splCode + ",UPDATE_TIME=sysdate where GOODS_CATEGORY_ID=" + Integer.valueOf(GOODS_CATEGORY_ID) + ";";
                s += "\n" + s1;
                sql.add(s1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(s);
    }

    /**
     * 从指定路径读取Excel文件，返回类型为List<Map<String,String>>
     *
     * @param path
     * @throws Exception
     */
    private static ArrayList<Map<String, String>> readExcel(String path) throws Exception {


        ArrayList<Map<String, String>> mapList = new ArrayList<>();
        File file = new File(path);
        //判断文件是否存在
        if (file.isFile() && file.exists()) {
            System.out.println(file.getPath());
            //获取文件的后缀名 \\ .是特殊字符
            String[] split = file.getName().split("\\.");
            System.out.println(split[1]);
            Workbook wb;
            //根据文件后缀（xls/xlsx）进行判断
            if ("xls".equals(split[1])) {
//              //获取文件流对象
                FileInputStream inputStream = new FileInputStream(file);
                wb = new HSSFWorkbook(inputStream);
            } else if ("xlsx".equals(split[1])) {
                wb = new XSSFWorkbook(file);
            } else {
                System.out.println("文件类型错误");
                return null;
            }

            //开始解析
            Sheet sheet = wb.getSheetAt(0);
            //第一行是列名，所以从第二行开始遍历
            int firstRowNum = sheet.getFirstRowNum() + 1;
            int lastRowNum = sheet.getLastRowNum();

            //遍历行
            for (int rIndex = firstRowNum; rIndex <= lastRowNum; rIndex++) {
                Map map = new HashMap();
                //获取当前行的内容
                Row row = sheet.getRow(rIndex);
                if (row != null) {
                    int firstCellNum = row.getFirstCellNum();
                    int lastCellNum = row.getLastCellNum();
                    for (int cIndex = firstCellNum; cIndex < lastCellNum; cIndex++) {
                        if (row.getCell(cIndex) == null) {
                            continue;
                        }
                        row.getCell(cIndex).setCellType(Cell.CELL_TYPE_STRING);
                        //获取单元格的值
                        String value = row.getCell(cIndex).getStringCellValue();
                        //System.out.println(value);
                        //获取此单元格对应第一行的值
                        String key = sheet.getRow(0).getCell(cIndex).getStringCellValue();
                        //System.out.println(key);
                        //第一行中的作为键，第n行的作为值
                        map.put(String.valueOf(key), value);
                        //System.out.println(map);
                    }
                }
                mapList.add(map);
                //System.out.println("读取成功");
                //System.out.println(mapList);
            }
            wb.close();

        }

        return mapList;

    }

    static void parse(ArrayList<Map<String, String>> mapList1, ArrayList<Map<String, String>> mapList2) {
        boolean f = false;
        Iterator<Map<String, String>> iterator = mapList1.iterator();
        while (iterator.hasNext()) {
            Map<String, String> map1 = iterator.next();
            f = false;
            String key1 = map1.get("订单号");
            for (Map<String, String> map2 : mapList2) {
                String key2 = map2.get("订单号");
                if (StringUtils.equals(key1, key2) && map1.get("商品名称").equals(map2.get("商品名称"))) {
                    f = true;
                    break;
                }
            }
            if (!f)
                mapArrayList1.add(map1);
        }

        iterator = mapList2.iterator();
        while (iterator.hasNext()) {
            f = false;
            Map<String, String> map2 = iterator.next();
            String key2 = map2.get("订单号");
            for (Map<String, String> map1 : mapList1) {
                String key1 = map1.get("订单号");
                if (StringUtils.equals(key1, key2) && map1.get("商品名称").equals(map2.get("商品名称"))) {
                    f = true;
                    break;
                }
            }
            if (!f)
                mapArrayList2.add(map2);
        }

    }

}
